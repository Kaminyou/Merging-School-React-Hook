{"version":3,"sources":["components/Header.js","components/Grid.js","components/Row.js","components/Board2048.js","containers/MergeSchool.js","App.js","reportWebVitals.js","index.js"],"names":["Header","handleReset","qs_ranking","best_qs_ranking","step","id","className","onClick","Grid","grid_value","row_idx","column_idx","grid_flag","grid_id","value_id","temp_class_name","value","2","4","8","16","32","64","128","256","512","1024","2048","4096","8192","16384","32768","65536","Row","row_vector","row_flag","map","Board2048","board","gameover","win","boardflag","boardClassName","infoClassName","outSentence","secret_seed","tokenString","split","i","length","charCodeAt","MergeSchool","useState","setBoard","setBoardflag","setQs_ranking","setBest_qs_ranking","setGameover","setStep","setWin","seed","prng","salt","mod","temp","rotateClockwise","matrix","result","row","e","reverse","push","rotateCounterClockwise","initializeBoard","boardset","putGridRandom","init","empty_grid","j","getEmptyGrid","random_num","random_empty_grid","justifyMove","prev","next","JSON","stringify","moveUp","prevBoard","rotateAsRight","output","moveRight","combination","r","c","current","unshift","moveDown","moveLeft","moveGrid","direction","nextBoard","checkAndUpdateAfterMove","nextBoardSetWithRandom","qsRankNow","stepNow","checkGameover","gameoverflag","includes","checkWin","handleKeyDown","event","preventDefault","keyCode","useEffect","body","document","querySelector","addEventListener","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.18e9bb22.chunk.js","sourcesContent":["export default function Header({ handleReset, qs_ranking, best_qs_ranking, step }){\n\n    return (\n        <>\n        <h1 id=\"title\">Merging School</h1>\n        <div className=\"btn-groups\">\n            <div className=\"qs-ranking\" id=\"general-qs-ranking\">QS: <p id=\"general-qs-ranking-value\">{qs_ranking}</p></div>\n            <div className=\"qs-ranking\" id=\"general-step\">Step: <p id=\"general-step-value\">{step}</p></div>\n            <div className=\"qs-ranking\" id=\"best-qs-ranking\">Best: <p id=\"best-qs-ranking-value\">{best_qs_ranking}</p></div>\n            <div className=\"button\" id=\"reset-button\" onClick={handleReset}>New Game</div>\n        </div>\n        </>\n    );\n}","export default function Grid ({ grid_value, row_idx, column_idx, grid_flag}) {\n    \n    let grid_id = `grid-${row_idx}-${column_idx}`;\n    let value_id = `value-${row_idx}-${column_idx}`;\n    let temp_class_name = 'grid';\n    let value = (grid_value === 0) ? '' : grid_value;\n\n    const mapping = {'':\"\", 2:\"NCTU\", 4:\"NYMU\", 8:\"NTU\", 16:\"UCSD\", 32:\"UBC\", 64:\"CUHK\", 128:\"UCLA\", 256:\"NYU\",512:\"UCB\",1024:\"HKUST\",\n                    2048:\"UTokyo\", 4096:\"Columbia\", 8192:\"Yale\", 16384:\"Cambridge\", 32768:\"Stanford\", 65536:\"MIT\"}\n    \n    if (value) {\n        temp_class_name += ` level-${value}`;\n    }\n    if (grid_flag) {\n        temp_class_name += \" school-fade-in\"\n    }\n\n    return (\n        <td>\n            <div className={temp_class_name} id={grid_id}>\n                <div className=\"school-name\" id={value_id}>{mapping[value]}</div>\n            </div>\n        </td>\n    );\n}","import Grid from '../components/Grid'\nexport default function Row ({ row_vector, row_idx, row_flag}) {\n    return (\n        <tr>\n          {row_vector.map((value, column_idx) => (<Grid key={column_idx} grid_value={value} row_idx={row_idx} column_idx={column_idx} grid_flag={row_flag[column_idx]}/>))}\n        </tr>\n    );\n};","import Row from './Row'\n\nexport default function Board2048 ({ board, handleReset, gameover, win, boardflag}) {\n\n    let boardClassName = \"board\";\n    let infoClassName = \"info\";\n    if (gameover) {\n        boardClassName += \" game-over-board\";\n        infoClassName += \" game-over-wrapper end-fade-in\";\n    }\n    let outSentence = \"No funding this year QAO\";\n    if (win){\n        outSentence = \"You should study a PhD!\";\n    }\n\n    return (\n        <>\n        <table className={boardClassName} id=\"board-full\">\n            <tbody>\n                {board.map((row_vector, row_idx) => (<Row key={row_idx} row_vector={row_vector} row_idx={row_idx} row_flag={boardflag[row_idx]}/>))}\n            </tbody>\n        </table>\n        <div className={infoClassName} id=\"game-over-info\">\n            <span id=\"game-over-text\">{outSentence}</span>\n            <div className=\"button\" id=\"game-over-button\" onClick={handleReset}>Try again</div>\n        </div>\n        </>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport Header from '../components/Header';\nimport Board2048 from '../components/Board2048'\nimport '../containers/MergeSchool.css';\n\nlet secret_seed = 1;\nconst tokenString = \"Kaminyou\".split(\"\");\nfor(let i = 0; i < tokenString.length; i++){\n    secret_seed *= tokenString[i].charCodeAt(0);\n    secret_seed = secret_seed % 0xffffffff;\n}\n\nfunction MergeSchool() {\n    const [board, setBoard] = useState([[0,0,0,0],\n        [0,0,0,0],\n        [0,0,0,0],\n        [2,2,0,0]]);\n    const [boardflag, setBoardflag] = useState([[0,0,0,0],\n        [0,0,0,0],\n        [0,0,0,0],\n        [1,1,0,0]]);\n    const [qs_ranking, setQs_ranking] = useState(32768);\n    const [best_qs_ranking, setBest_qs_ranking] = useState(32768);\n    const [gameover, setGameover] = useState(false);\n    const [step, setStep] = useState(0);\n    const [win, setWin] = useState(false);\n    const [seed, setSeed] = useState(secret_seed);\n\n    // Pesudo random number generator\n    // 4 bytes hashing function By Thomas Wang or Robert Jenkins\n    const prng = (seed, salt, mod) => {\n        let temp = seed + salt;\n        temp = (temp+0x7ed55d16) + (temp<<12);\n        temp = (temp^0xc761c23c) ^ (temp>>19);\n        temp = (temp+0x165667b1) + (temp<<5);\n        temp = (temp+0xd3a2646c) ^ (temp<<9);\n        temp = (temp+0xfd7046c5) + (temp<<3);\n        temp = (temp^0xb55a4f09) ^ (temp>>16);\n        if( temp < 0 ) temp = 0xffffffff + temp;\n        return (temp % mod);\n    }   \n    \n    // Initialize flag board\n    const initializeBoardFlag = () => {\n        let boardflag = [[0,0,0,0],\n                        [0,0,0,0],\n                        [0,0,0,0],\n                        [0,0,0,0]];\n        return boardflag;\n    }\n\n    // Rotate the matrix clockwisely\n    const rotateClockwise = (matrix) => {\n        let result = [];\n        for(let i = 0; i < matrix[0].length; i++) {\n            let row = matrix.map(e => e[i]).reverse();\n            result.push(row);\n        }\n        return result;\n    }\n    \n    // Rotate the matrix counterclockwisely\n    const rotateCounterClockwise = (matrix) => {\n        let result = [];\n        for(let i = matrix[0].length - 1; i >= 0 ; i--) {\n            let row = matrix.map(e => e[i]);\n            result.push(row);\n        }\n        return result;\n    }\n\n    // Create board and add two \"2\" and reset everything required\n    const initializeBoard = () => {\n        let board = [[0,0,0,0],\n                     [0,0,0,0],\n                     [0,0,0,0],\n                     [0,0,0,0]];\n        let boardflag = initializeBoardFlag();\n        let boardset = putGridRandom(board, boardflag, true);\n        boardset = putGridRandom(boardset.board, boardset.boardflag, true);\n        setBoard(boardset.board);\n        setQs_ranking(32768);\n        setGameover(false);\n        setStep(0);\n        setWin(false);\n        setBoardflag(boardset.boardflag);\n    }\n\n    \n    \n    // Get all empty x y coordinates in board\n    const getEmptyGrid = (board) => {\n        let empty_grid = [];\n        for (let i = 0; i < 4; i++) {\n            for (let j = 0; j<4; j++) {\n                if (board[i][j] === 0) {\n                    empty_grid.push([i, j])\n                }\n            }\n        }\n        return empty_grid;\n    }\n    \n    // Put one \"2\" in random empty grid\n    const putGridRandom = (board, boardflag, init) => {\n        let empty_grid = getEmptyGrid(board);\n        let random_num = prng(seed, step, empty_grid.length);\n        if (init){\n            random_num = prng(seed, 0, empty_grid.length);\n        } \n        let random_empty_grid = empty_grid[random_num];\n        board[random_empty_grid[0]][random_empty_grid[1]] = 2;\n        boardflag[random_empty_grid[0]][random_empty_grid[1]] = 1;\n        return {board, boardflag};\n    }\n    \n    // Check if one move is effecitve\n    const justifyMove = (prev, next) => {\n        let prev_string = JSON.stringify(prev)\n        let new_string = JSON.stringify(next)\n        return (prev_string !== new_string) ? true : false;\n    }\n\n    // Moveup function\n    const moveUp = (prevBoard) => {\n        let rotateAsRight = rotateClockwise(prevBoard);\n        let output = moveRight(rotateAsRight);\n        let board = rotateCounterClockwise(output.board);\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Moveright function\n    const moveRight = (prevBoard) => {\n        let board = [];\n        let combination = 0;\n    \n        for (let r = 0; r < prevBoard.length; r++) {\n            let row = [];      \n            for (let c = 0; c < prevBoard[r].length; c++) {\n                let current = prevBoard[r][c];\n                (current === 0) ? row.unshift(current) : row.push(current);\n            }\n            board.push(row);\n        }\n    \n        for (let r = 0; r < board.length; r++) {\n            // special case\n            if ((board[r][0] === board[r][1]) && (board[r][0] !== 0) && (board[r][2] === board[r][3]) && (board[r][2] !== 0)) {\n                board[r][3] = board[r][3] * 2;\n                board[r][2] = board[r][1] * 2;\n                board[r][1] = 0;\n                board[r][0] = 0;\n                combination += 2;\n                continue;\n            }\n\n            for (let c = board[r].length - 1; c > 0; c--) {\n                if (board[r][c] > 0 && board[r][c] === board[r][c - 1]) {\n                    board[r][c] = board[r][c] * 2;\n                    board[r][c - 1] = 0;\n                    combination += 1;\n                } else if (board[r][c] === 0 && board[r][c - 1] > 0) {\n                    board[r][c] = board[r][c - 1];\n                    board[r][c - 1] = 0;\n                }\n            }\n        }\n    \n        return {board, combination};\n    }\n    \n    // Movedown function\n    const moveDown = (prevBoard) => {\n        let rotateAsRight = rotateCounterClockwise(prevBoard);\n        let output = moveRight(rotateAsRight);\n        let board = rotateClockwise(output.board);\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Moveleft function\n    const moveLeft = (prevBoard) => {\n        let rotateAsRight = rotateClockwise(rotateClockwise(prevBoard));\n        let output = moveRight(rotateAsRight);\n        let board = rotateCounterClockwise(rotateCounterClockwise(output.board));\n        let combination =  output.combination;\n    \n        return {board, combination};\n    }\n    \n    // Move\n    const moveGrid = (direction) => {\n        if (!gameover) {\n            if (direction === 'up') {\n                const nextBoard = moveUp(board);\n                checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'right') {\n                const nextBoard = moveRight(board);\n                checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'down') {\n                const nextBoard = moveDown(board);\n                checkAndUpdateAfterMove(nextBoard);\n            } \n            else if (direction === 'left') {\n                const nextBoard = moveLeft(board);\n                checkAndUpdateAfterMove(nextBoard);\n            }\n        } \n    }\n\n    // Check everything after one move including gameover and win\n    // Also, the step, ranking, best ranking should be updated here\n    const checkAndUpdateAfterMove = (nextBoard) => {\n        if (justifyMove(board, nextBoard.board)) {\n            let boardflag = initializeBoardFlag();\n            const nextBoardSetWithRandom = putGridRandom(nextBoard.board, boardflag, false);\n            let qsRankNow = qs_ranking - nextBoard.combination;\n            let stepNow = step + 1;\n            setBoard(nextBoardSetWithRandom.board);\n            setQs_ranking(qsRankNow);\n            setStep(stepNow);\n            setBoardflag(nextBoardSetWithRandom.boardflag);\n            \n            if (qsRankNow < best_qs_ranking){\n                setBest_qs_ranking(qsRankNow)\n            }\n\n            if (checkGameover(nextBoardSetWithRandom.board)) {\n                setGameover(true);\n            }\n        }\n    }\n    \n    // Check if it is gameover\n    const checkGameover = (board) => {\n        let moves = [\n            justifyMove(board, moveUp(board).board),\n            justifyMove(board, moveRight(board).board),\n            justifyMove(board, moveDown(board).board),\n            justifyMove(board, moveLeft(board).board)\n        ];\n        \n        let gameoverflag = (moves.includes(true)) ? false : true;\n\n        if (checkWin(board)) {\n            gameoverflag = true;\n        }\n        \n        return gameoverflag;\n    }\n\n    // Check if it is win\n    const checkWin = (board) => {\n        for (let i=0; i<board.length;i++){\n            for (let j=0; j<board[i].length;j++){\n                if (board[i][j] === 65536){\n                    setWin(true);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    \n    const handleKeyDown = (event) => {\n        event.preventDefault();\n        if (event.keyCode === 37) {\n            moveGrid(\"left\");\n        } else if (event.keyCode === 38) {\n            moveGrid(\"up\");\n        } else if (event.keyCode === 39) {\n            moveGrid(\"right\");\n        } else if (event.keyCode === 40) {\n            moveGrid(\"down\");\n        }\n    }\n    \n    \n    useEffect(() => {\n        const body = document.querySelector('body');\n        body.addEventListener('keydown', handleKeyDown);\n        return () => body.removeEventListener('keydown', handleKeyDown);\n    }, [board, boardflag, qs_ranking, step, best_qs_ranking, gameover, win]\n    );\n    \n    // Useful function for you to check the endgame\n    const setBadEnd = () => {\n        let nextBoard = [[2,4,2,4],\n                        [4,2,4,2],\n                        [2,4,2,128],\n                        [4,128,2,2]];\n        setBoard(nextBoard);\n    }\n    \n    // Useful function for you to check the best result\n    const setGoodEnd = () => {\n        let nextBoard = [[2,2,4,8],\n                        [128,64,32,16],\n                        [256,512,1024,2048],\n                        [32768,16384,8192,4096]];\n        setBoard(nextBoard);\n    }\n\n\n    return (\n        <>      \n            <Header handleReset={initializeBoard} qs_ranking={qs_ranking} best_qs_ranking={best_qs_ranking} step={step}/>\n            <Board2048 className=\"wrapper\" board={board} handleReset={initializeBoard} gameover={gameover} win={win} boardflag={boardflag}/>\n            <div className=\"btn-groups\">\n                <div className=\"btn-useful\" id=\"badend-btn\" onClick={setBadEnd}>BadEnd</div>\n                <div className=\"btn-useful\" id=\"goodend-btn\" onClick={setGoodEnd}>GoodEnd</div>\n            </div>\n        </>\n    );\n}\n\nexport default MergeSchool;","import './App.css';\nimport MergeSchool from './containers/MergeSchool'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MergeSchool/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}